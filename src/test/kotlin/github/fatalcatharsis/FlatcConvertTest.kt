package github.fatalcatharsis

import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.junit.Assert.*
import org.junit.Rule
import org.junit.Test
import org.junit.rules.TemporaryFolder
import java.io.FileOutputStream
import java.io.PrintWriter
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths

class FlatcConvertTest {
    @get:Rule
    val projectDir = TemporaryFolder()

    @Test
    fun `Functional test of binary file generation from json`() {
        // given
        writeFile(Paths.get("build.gradle.kts"), """
            import github.fatalcatharsis.FlatcConvert

            plugins {
                `cpp-application`
                id("github.fatalcatharsis.flatc") version("1.0-SNAPSHOT")
            }

            tasks.create<FlatcConvert>("vec2") {
                input = file("src/main/resources/vec2.json")
                template = file("src/main/resources/vec2.fbs")
            }
        """.trimIndent())

        writeFile(Paths.get("settings.gradle.kts"), """
            rootProject.name = "flatc"

            pluginManagement {
                repositories {
                    mavenLocal()
                    maven("https://plugins.gradle.org/m2/")
                }
            }
        """.trimIndent())

        writeFile(Paths.get("src/main/resources/vec2.fbs"), """
            table Vec2 {
                x: float;
                y: float;
            }

            root_type Vec2;
        """.trimIndent())

        writeFile(Paths.get("src/main/resources/vec2.json"), """
            {
                "x": "0.4423",
                "y": "0.6508"
            }
        """.trimIndent())

        // when
        val result = GradleRunner.create()
            .withArguments("build")
            .withProjectDir(projectDir.root)
            .withPluginClasspath()
            .build()

        // then
        assertEquals(TaskOutcome.SUCCESS, result.task(":build")!!.outcome)
        assertTrue("Expected a header file to be generated by flatc", Files.exists(projectDir.root.toPath().resolve("./build/install/vec2.bin")))
    }

    private fun writeFile(filePath: Path, content: String) {
        if (filePath.parent != null) {
            val parentPath = projectDir.root.toPath().resolve(filePath.parent).normalize()
            Files.createDirectories(parentPath)
        } else {
            projectDir.root.toPath()
        }

        val outputStream = FileOutputStream(projectDir.root.resolve(filePath.toFile()))
        PrintWriter(outputStream).use {
            it.write(content)
        }
    }
}
